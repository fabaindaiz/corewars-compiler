file: TINT
##
## Ends in an error in state: 0.
##
## file' -> . file [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SUB TINT
##
## Ends in an error in state: 2.
##
## expr -> SUB . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: STP TINT
##
## Ends in an error in state: 3.
##
## expr -> STP . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## STP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SPL TINT
##
## Ends in an error in state: 4.
##
## expr -> SPL . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SPL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SNE TINT
##
## Ends in an error in state: 5.
##
## expr -> SNE . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SNE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SLT TINT
##
## Ends in an error in state: 6.
##
## expr -> SLT . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SLT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SEQ TINT
##
## Ends in an error in state: 7.
##
## expr -> SEQ . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: NOT TINT
##
## Ends in an error in state: 8.
##
## expr -> NOT . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: NOP TINT
##
## Ends in an error in state: 9.
##
## expr -> NOP . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## NOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: MUL TINT
##
## Ends in an error in state: 10.
##
## expr -> MUL . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## MUL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: MOV TINT
##
## Ends in an error in state: 11.
##
## expr -> MOV . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## MOV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: MOD TINT
##
## Ends in an error in state: 12.
##
## expr -> MOD . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: MINUS TINT
##
## Ends in an error in state: 13.
##
## expr -> MINUS . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LPAREN TINT
##
## Ends in an error in state: 14.
##
## simple_expr -> LPAREN . expr RPAREN [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DOT DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET TRUE
##
## Ends in an error in state: 15.
##
## expr -> LET . ID EQUAL expr IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## expr -> LET . ID COLON ty EQUAL expr IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## expr -> LET . REC and_bindings IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC TRUE
##
## Ends in an error in state: 16.
##
## expr -> LET REC . and_bindings IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET REC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID TRUE
##
## Ends in an error in state: 17.
##
## and_bindings -> ID . EQUAL expr [ IN ]
## and_bindings -> ID . COLON ty EQUAL expr [ IN ]
## and_bindings -> ID . EQUAL expr AND and_bindings [ IN ]
## and_bindings -> ID . COLON ty EQUAL expr AND and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID EQUAL TINT
##
## Ends in an error in state: 18.
##
## and_bindings -> ID EQUAL . expr [ IN ]
## and_bindings -> ID EQUAL . expr AND and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LDP TINT
##
## Ends in an error in state: 19.
##
## expr -> LDP . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LDP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: JMZ TINT
##
## Ends in an error in state: 20.
##
## expr -> JMZ . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## JMZ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: JMP TINT
##
## Ends in an error in state: 21.
##
## expr -> JMP . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## JMP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: JMN TINT
##
## Ends in an error in state: 22.
##
## expr -> JMN . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## JMN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: IF TINT
##
## Ends in an error in state: 24.
##
## expr -> IF . expr THEN expr ELSE expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUN TRUE
##
## Ends in an error in state: 26.
##
## expr -> FUN . ID ARROW expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## expr -> FUN . ID COLON ty ARROW expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUN ID TRUE
##
## Ends in an error in state: 27.
##
## expr -> FUN ID . ARROW expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## expr -> FUN ID . COLON ty ARROW expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## FUN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUN ID COLON TRUE
##
## Ends in an error in state: 28.
##
## expr -> FUN ID COLON . ty ARROW expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## FUN ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON LPAREN TRUE
##
## Ends in an error in state: 32.
##
## simple_ty -> LPAREN . ty RPAREN [ TIMES RPAREN EQUAL EOF COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON LPAREN TARG EQUAL
##
## Ends in an error in state: 33.
##
## simple_ty -> LPAREN ty . RPAREN [ TIMES RPAREN EQUAL EOF COLONCOLON ARROW ]
## ty -> ty . ARROW simple_ty [ RPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> simple_ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON TARG ARROW TRUE
##
## Ends in an error in state: 35.
##
## ty -> ty ARROW . simple_ty [ RPAREN EQUAL EOF COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## ty ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON TARG TRUE
##
## Ends in an error in state: 37.
##
## reversed_separated_nontrivial_llist(TIMES,simple_ty) -> simple_ty . TIMES simple_ty [ TIMES RPAREN EQUAL EOF COLONCOLON ARROW ]
## ty -> simple_ty . [ RPAREN EQUAL EOF COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## simple_ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON TARG TIMES TRUE
##
## Ends in an error in state: 38.
##
## reversed_separated_nontrivial_llist(TIMES,simple_ty) -> simple_ty TIMES . simple_ty [ TIMES RPAREN EQUAL EOF COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## simple_ty TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON TARG TIMES TARG TRUE
##
## Ends in an error in state: 40.
##
## reversed_separated_nontrivial_llist(TIMES,simple_ty) -> reversed_separated_nontrivial_llist(TIMES,simple_ty) . TIMES simple_ty [ TIMES RPAREN EQUAL EOF COLONCOLON ARROW ]
## ty -> reversed_separated_nontrivial_llist(TIMES,simple_ty) . [ RPAREN EQUAL EOF COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## reversed_separated_nontrivial_llist(TIMES,simple_ty)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON TARG TIMES TARG TIMES TRUE
##
## Ends in an error in state: 41.
##
## reversed_separated_nontrivial_llist(TIMES,simple_ty) -> reversed_separated_nontrivial_llist(TIMES,simple_ty) TIMES . simple_ty [ TIMES RPAREN EQUAL EOF COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## reversed_separated_nontrivial_llist(TIMES,simple_ty) TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUN ID COLON TARG RPAREN
##
## Ends in an error in state: 43.
##
## expr -> FUN ID COLON ty . ARROW expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## ty -> ty . ARROW simple_ty [ ARROW ]
##
## The known suffix of the stack is as follows:
## FUN ID COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> simple_ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUN ID COLON TARG ARROW TIMES
##
## Ends in an error in state: 44.
##
## expr -> FUN ID COLON ty ARROW . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## ty -> ty ARROW . simple_ty [ ARROW ]
##
## The known suffix of the stack is as follows:
## FUN ID COLON ty ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUN ID COLON TARG ARROW LPAREN TIMES
##
## Ends in an error in state: 45.
##
## simple_expr -> LPAREN . expr RPAREN [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DOT DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## simple_ty -> LPAREN . ty RPAREN [ TIMES RPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: DJN TINT
##
## Ends in an error in state: 47.
##
## expr -> DJN . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## DJN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: DIV TINT
##
## Ends in an error in state: 48.
##
## expr -> DIV . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: DAT TINT
##
## Ends in an error in state: 49.
##
## expr -> DAT . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## DAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: ADD TINT
##
## Ends in an error in state: 50.
##
## expr -> ADD . expr expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## ADD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE TINT
##
## Ends in an error in state: 51.
##
## app_expr -> simple_expr . [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## simple_expr -> simple_expr . DOT LPAREN INT RPAREN [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DOT DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE DOT TRUE
##
## Ends in an error in state: 52.
##
## simple_expr -> simple_expr DOT . LPAREN INT RPAREN [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DOT DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE DOT LPAREN TRUE
##
## Ends in an error in state: 53.
##
## simple_expr -> simple_expr DOT LPAREN . INT RPAREN [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DOT DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE DOT LPAREN INT TRUE
##
## Ends in an error in state: 54.
##
## simple_expr -> simple_expr DOT LPAREN INT . RPAREN [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DOT DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT LPAREN INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COMMA FALSE COMMA TINT
##
## Ends in an error in state: 57.
##
## reversed_separated_nontrivial_llist(COMMA,expr) -> reversed_separated_nontrivial_llist(COMMA,expr) COMMA . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## reversed_separated_nontrivial_llist(COMMA,expr) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE TIMES TINT
##
## Ends in an error in state: 59.
##
## expr -> expr TIMES . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE FALSE TINT
##
## Ends in an error in state: 62.
##
## app_expr -> app_expr simple_expr . [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## simple_expr -> simple_expr . DOT LPAREN INT RPAREN [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DOT DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## app_expr simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE PLUS TINT
##
## Ends in an error in state: 63.
##
## expr -> expr PLUS . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE MINUS TINT
##
## Ends in an error in state: 65.
##
## expr -> expr MINUS . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE LESS TINT
##
## Ends in an error in state: 67.
##
## expr -> expr LESS . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr LESS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE EQUAL TINT
##
## Ends in an error in state: 69.
##
## expr -> expr EQUAL . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE BARBAR TINT
##
## Ends in an error in state: 71.
##
## expr -> expr BARBAR . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr BARBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE AMPERSANDAMPERSAND TINT
##
## Ends in an error in state: 73.
##
## expr -> expr AMPERSANDAMPERSAND . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr AMPERSANDAMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: ADD FALSE THEN
##
## Ends in an error in state: 75.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> ADD expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## ADD expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: ADD FALSE MINUS TINT
##
## Ends in an error in state: 76.
##
## expr -> MINUS . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## expr -> expr MINUS . expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COMMA TINT
##
## Ends in an error in state: 78.
##
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr COMMA . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: DAT FALSE THEN
##
## Ends in an error in state: 81.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> DAT expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## DAT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: DIV FALSE THEN
##
## Ends in an error in state: 83.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> DIV expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## DIV expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: DJN FALSE THEN
##
## Ends in an error in state: 85.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> DJN expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## DJN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LPAREN FALSE THEN
##
## Ends in an error in state: 87.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## simple_expr -> LPAREN expr . RPAREN [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DOT DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUN ID ARROW TINT
##
## Ends in an error in state: 90.
##
## expr -> FUN ID ARROW . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## FUN ID ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: IF FALSE SUB
##
## Ends in an error in state: 92.
##
## expr -> expr . PLUS expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> IF expr . THEN expr ELSE expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: IF FALSE THEN TINT
##
## Ends in an error in state: 93.
##
## expr -> IF expr THEN . expr ELSE expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: IF FALSE THEN FALSE THEN
##
## Ends in an error in state: 94.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> IF expr THEN expr . ELSE expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: IF FALSE THEN FALSE ELSE TINT
##
## Ends in an error in state: 95.
##
## expr -> IF expr THEN expr ELSE . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: JMN FALSE THEN
##
## Ends in an error in state: 97.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> JMN expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## JMN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: JMP FALSE THEN
##
## Ends in an error in state: 99.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> JMP expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## JMP expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: JMZ FALSE THEN
##
## Ends in an error in state: 101.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> JMZ expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## JMZ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LDP FALSE THEN
##
## Ends in an error in state: 103.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> LDP expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LDP expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID EQUAL FALSE THEN
##
## Ends in an error in state: 105.
##
## and_bindings -> ID EQUAL expr . [ IN ]
## and_bindings -> ID EQUAL expr . AND and_bindings [ IN ]
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## ID EQUAL expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID EQUAL FALSE AND TRUE
##
## Ends in an error in state: 106.
##
## and_bindings -> ID EQUAL expr AND . and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID EQUAL expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID COLON TRUE
##
## Ends in an error in state: 108.
##
## and_bindings -> ID COLON . ty EQUAL expr [ IN ]
## and_bindings -> ID COLON . ty EQUAL expr AND and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID COLON TARG RPAREN
##
## Ends in an error in state: 109.
##
## and_bindings -> ID COLON ty . EQUAL expr [ IN ]
## and_bindings -> ID COLON ty . EQUAL expr AND and_bindings [ IN ]
## ty -> ty . ARROW simple_ty [ EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## ID COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> simple_ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID COLON TARG EQUAL TINT
##
## Ends in an error in state: 110.
##
## and_bindings -> ID COLON ty EQUAL . expr [ IN ]
## and_bindings -> ID COLON ty EQUAL . expr AND and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID COLON ty EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID COLON TARG EQUAL FALSE THEN
##
## Ends in an error in state: 111.
##
## and_bindings -> ID COLON ty EQUAL expr . [ IN ]
## and_bindings -> ID COLON ty EQUAL expr . AND and_bindings [ IN ]
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## ID COLON ty EQUAL expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID COLON TARG EQUAL FALSE AND TRUE
##
## Ends in an error in state: 112.
##
## and_bindings -> ID COLON ty EQUAL expr AND . and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID COLON ty EQUAL expr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET REC ID EQUAL FALSE IN TINT
##
## Ends in an error in state: 115.
##
## expr -> LET REC and_bindings IN . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET REC and_bindings IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID TRUE
##
## Ends in an error in state: 117.
##
## expr -> LET ID . EQUAL expr IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## expr -> LET ID . COLON ty EQUAL expr IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUAL TINT
##
## Ends in an error in state: 118.
##
## expr -> LET ID EQUAL . expr IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET ID EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUAL FALSE THEN
##
## Ends in an error in state: 119.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> LET ID EQUAL expr . IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET ID EQUAL expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID EQUAL FALSE IN TINT
##
## Ends in an error in state: 120.
##
## expr -> LET ID EQUAL expr IN . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET ID EQUAL expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON TRUE
##
## Ends in an error in state: 122.
##
## expr -> LET ID COLON . ty EQUAL expr IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON TARG RPAREN
##
## Ends in an error in state: 123.
##
## expr -> LET ID COLON ty . EQUAL expr IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## ty -> ty . ARROW simple_ty [ EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## LET ID COLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> simple_ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON TARG EQUAL TINT
##
## Ends in an error in state: 124.
##
## expr -> LET ID COLON ty EQUAL . expr IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET ID COLON ty EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON TARG EQUAL FALSE THEN
##
## Ends in an error in state: 125.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> LET ID COLON ty EQUAL expr . IN expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET ID COLON ty EQUAL expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LET ID COLON TARG EQUAL FALSE IN TINT
##
## Ends in an error in state: 126.
##
## expr -> LET ID COLON ty EQUAL expr IN . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## LET ID COLON ty EQUAL expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: MOD FALSE THEN
##
## Ends in an error in state: 129.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> MOD expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## MOD expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: MOV FALSE THEN
##
## Ends in an error in state: 131.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> MOV expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## MOV expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: MUL FALSE THEN
##
## Ends in an error in state: 133.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> MUL expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## MUL expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: NOP FALSE THEN
##
## Ends in an error in state: 135.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> NOP expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## NOP expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SEQ FALSE THEN
##
## Ends in an error in state: 138.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> SEQ expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SEQ expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SLT FALSE THEN
##
## Ends in an error in state: 140.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> SLT expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SLT expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SNE FALSE THEN
##
## Ends in an error in state: 142.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> SNE expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SNE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SPL FALSE THEN
##
## Ends in an error in state: 144.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> SPL expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SPL expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: STP FALSE THEN
##
## Ends in an error in state: 146.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> STP expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## STP expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: SUB FALSE THEN
##
## Ends in an error in state: 148.
##
## expr -> expr . PLUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . MINUS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . TIMES expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . EQUAL expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . LESS expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> expr . BARBAR expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
## expr -> SUB expr . expr [ TRUE TIMES THEN SUB STP SPL SNE SLT SEQ RPAREN PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IN IF ID FUN FALSE EQUAL EOF ELSE DJN DIV DAT COMMA COLONCOLON BARBAR AND AMPERSANDAMPERSAND ADD ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TRUE TIMES SUB STP SPL SNE SLT SEQ PLUS NOT NOP MUL MOV MOD MINUS LPAREN LET LESS LDP JMZ JMP JMN INT IF ID FUN FALSE EQUAL DJN DIV DAT COMMA BARBAR AMPERSANDAMPERSAND ADD ]
##
## The known suffix of the stack is as follows:
## SUB expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON TRUE
##
## Ends in an error in state: 153.
##
## top -> top COLONCOLON . ty [ EOF COLONCOLON ]
##
## The known suffix of the stack is as follows:
## top COLONCOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE COLONCOLON TARG RPAREN
##
## Ends in an error in state: 154.
##
## top -> top COLONCOLON ty . [ EOF COLONCOLON ]
## ty -> ty . ARROW simple_ty [ EOF COLONCOLON ARROW ]
##
## The known suffix of the stack is as follows:
## top COLONCOLON ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production ty -> simple_ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FALSE THEN
##
## Ends in an error in state: 156.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA COLONCOLON BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA COLONCOLON BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA COLONCOLON BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA COLONCOLON BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA COLONCOLON BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA COLONCOLON BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA COLONCOLON BARBAR AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA COLONCOLON BARBAR AMPERSANDAMPERSAND ]
## top -> expr . [ EOF COLONCOLON ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 51, spurious reduction of production app_expr -> simple_expr
## In state 61, spurious reduction of production expr -> app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

